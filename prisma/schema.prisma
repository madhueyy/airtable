// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  bases         Base[]
}

model VerificationToken {
  identifier    String
  token         String   @unique
  expires       DateTime

  @@unique([identifier, token])
}

model Base {
  id            String   @id @default(cuid())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdBy     User   @relation(fields: [createdById], references: [id])
  createdById   String

  tables        Table[]
}

model Table {
    id          String      @id @default(cuid())
    name        String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    base        Base        @relation(fields: [baseId], references: [id], onDelete: Cascade)
    baseId      String

    columns     Column[]
    cells       Cell[]
    views       View[]
}

model Column {
    id          String      @id @default(cuid())
    name        String      @default("Name")
    columnNum   Int
    columnType  ColumnType

    table       Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId     String

    cells       Cell[]
    filters     Filter[]
    sorts       Sort[]
    hiddenInViews View[]    @relation("HiddenColumns")
}

enum ColumnType {
    TEXT
    NUMBER
}

model Cell {
    id          String      @id @default(cuid())
    rowNum      Int
    value       String      @default("")

    table       Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId     String
    
    column      Column      @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId    String
    columnNum   Int
}

model View {
    id          String      @id @default(cuid())
    name        String

    table       Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId     String

    filters     Filter[]
    sorts       Sort[]
    hiddenColumns Column[]  @relation("HiddenColumns")
}

model Filter {
    id          String      @id @default(cuid())
    column      Column      @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId    String

    view        View        @relation(fields: [viewId], references: [id], onDelete: Cascade)
    viewId      String

    operator    FilterType
    value       String
}

enum FilterType {
    EQUALS
    NOT_EQUALS
    CONTAINS
    NOT_CONTAINS
    IS_EMPTY
    IS_NOT_EMPTY
    GT
    LT
}

model Sort {
  id          String      @id @default(cuid())
  column      Column      @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String

  view        View        @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId      String

  direction   SortDirection
}

enum SortDirection {
  ASC
  DESC
}